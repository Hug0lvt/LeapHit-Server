// <auto-generated />
using System;
using DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(PongDbContextWithStub))]
    partial class PongDbContextWithStubModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("DataBase.Entity.Chat", b =>
                {
                    b.Property<int>("chatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("player1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("player2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("chatId");

                    b.HasIndex("player1");

                    b.HasIndex("player2");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            chatId = 1,
                            player1 = "test",
                            player2 = "test2"
                        });
                });

            modelBuilder.Entity("DataBase.Entity.Game", b =>
                {
                    b.Property<int>("gameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("durationGame")
                        .HasColumnType("INTEGER");

                    b.Property<string>("loser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("nbMaxEchanges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("scoreLoser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("scoreWinner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("winner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("gameId");

                    b.HasIndex("loser");

                    b.HasIndex("winner");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            gameId = 1,
                            durationGame = 65,
                            loser = "test2",
                            nbMaxEchanges = 5,
                            scoreLoser = 2,
                            scoreWinner = 6,
                            winner = "test"
                        });
                });

            modelBuilder.Entity("DataBase.Entity.Message", b =>
                {
                    b.Property<int>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("chat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("player")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("messageId");

                    b.HasIndex("chat");

                    b.HasIndex("player");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            messageId = 1,
                            chat = 1,
                            message = "Salut mon gars !",
                            player = "test",
                            timestamp = new DateTime(2023, 2, 16, 17, 5, 12, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            messageId = 2,
                            chat = 1,
                            message = "Comment tu vas ?",
                            player = "test2",
                            timestamp = new DateTime(2023, 2, 16, 17, 12, 35, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataBase.Entity.Player", b =>
                {
                    b.Property<string>("playerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("nbBallTouchTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("timePlayed")
                        .HasColumnType("INTEGER");

                    b.HasKey("playerId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            playerId = "test",
                            name = "Rami",
                            nbBallTouchTotal = 20,
                            timePlayed = 120
                        },
                        new
                        {
                            playerId = "test2",
                            name = "Hugo",
                            nbBallTouchTotal = 90,
                            timePlayed = 250
                        });
                });

            modelBuilder.Entity("DataBase.Entity.Chat", b =>
                {
                    b.HasOne("DataBase.Entity.Player", "PlayerId1")
                        .WithMany()
                        .HasForeignKey("player1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Entity.Player", "PlayerId2")
                        .WithMany()
                        .HasForeignKey("player2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerId1");

                    b.Navigation("PlayerId2");
                });

            modelBuilder.Entity("DataBase.Entity.Game", b =>
                {
                    b.HasOne("DataBase.Entity.Player", "PlayerLoser")
                        .WithMany()
                        .HasForeignKey("loser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Entity.Player", "PlayerWinner")
                        .WithMany()
                        .HasForeignKey("winner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerLoser");

                    b.Navigation("PlayerWinner");
                });

            modelBuilder.Entity("DataBase.Entity.Message", b =>
                {
                    b.HasOne("DataBase.Entity.Chat", "ChatId")
                        .WithMany()
                        .HasForeignKey("chat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Entity.Player", "PlayerId")
                        .WithMany()
                        .HasForeignKey("player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatId");

                    b.Navigation("PlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
