kind: pipeline
type: docker
name: CI_CD_LeapHit

trigger:
    event:
      - push

steps:

    - name: build
      image: mcr.microsoft.com/dotnet/sdk:6.0
      commands:
        - cd code/server
        - dotnet workload restore
        - dotnet restore Server.sln
        - dotnet build Server.sln -c Release --no-restore
        - dotnet publish Server.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release

    - name: tests
      image: mcr.microsoft.com/dotnet/sdk:6.0
      commands:
        - cd code/server
        - dotnet restore Server.sln
        - dotnet test Server.sln --no-restore
      depends_on: [build]

    - name: code-analysis
      image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dronesonarplugin-dotnet6
      commands:
        - cd code/server
        - dotnet workload restore
        - dotnet restore Server.sln
        - dotnet sonarscanner begin /k:PongSrv /d:sonar.host.url=$${PLUGIN_SONAR_HOST} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**,DataBase/Program.cs,DataBase/Migrations/**,DataBase/DataManager/**,DataBase/Context/PongDbContextWithStub.cs" /d:sonar.login=$${PLUGIN_SONAR_TOKEN} 
        - dotnet build Server.sln -c Release --no-restore
        - dotnet test Server.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
        - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
        - dotnet publish Server.sln -c Release --no-restore -o CI_PROJECT_DIR/build/release
        - dotnet sonarscanner end /d:sonar.login=$${PLUGIN_SONAR_TOKEN}
      secrets: [ SECRET_SONAR_LOGIN ]
      settings:
        # accessible en ligne de commande par ${PLUGIN_SONAR_HOST}
        sonar_host: https://codefirst.iut.uca.fr/sonar/
        # accessible en ligne de commande par ${PLUGIN_SONAR_TOKEN}
        sonar_token:
          from_secret: SECRET_SONAR_LOGIN
      depends_on: [tests]

    - name: build-docker-image
      image: plugins/docker
      settings:
          dockerfile: code/server/Dockerfile
          context: code/server
          registry: hub.codefirst.iut.uca.fr
          repo: hub.codefirst.iut.uca.fr/leap-hit-team/leap-hit-server
          username:
            from_secret: SECRET_REGISTRY_USERNAME
          password:
            from_secret: SECRET_REGISTRY_PASSWORD

      # container deployment
    - name: deploy-server
      image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
      environment:
          IMAGENAME: hub.codefirst.iut.uca.fr/leap-hit-team/leap-hit-server:latest
          CONTAINERNAME: server-container
          COMMAND: create
          OVERWRITE: true
          ADMINS: brunoda_costa_cunha,noanrandon,ramikhedair,lorisperret,hugolivet
      depends_on: [ build-docker-image ]

    # database container deployment
    - name: deploy-container-mysql
      image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
      environment:
         IMAGENAME: mariadb:10
         CONTAINERNAME: mysql
         COMMAND: create
         # OVERWRITE: false
         PRIVATE: true
         CODEFIRST_CLIENTDRONE_ENV_MARIADB_ROOT_PASSWORD:
           from_secret: db_root_password
         CODEFIRST_CLIENTDRONE_ENV_MARIADB_DATABASE:
           from_secret: db_database
         CODEFIRST_CLIENTDRONE_ENV_MARIADB_USER:
           from_secret: db_user
         CODEFIRST_CLIENTDRONE_ENV_MARIADB_PASSWORD:
           from_secret: db_password
         ADMINS: noanrandon,hugolivet,ramikhedair,lorisperret,brunoda_costa_cunha
      depends_on: [ build-docker-image ]